////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = 1) {
  var range = [];
  if (start === end) return range;
  if (step > 0) {
    for (let i = start; i <= end; i+=step) {
      range.push(i);
    }
  } else {
    for (let i = start; i >= end; i+=step) {
      range.push(i);
    }
  }
  return range;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {

  if (arr.length == 0) return 0;
  return arr[0] + sum(arr.slice(1));
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {

  let retArr = [];
  for (let i = arr.length-1; i >= 0; i--) {
    retArr.push(arr[i]);
  }
  return retArr;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {

  for (let i = 0; i < Math.floor(arr.length/2); i++) {
    let holdA = arr[i];
    let holdB = arr[arr.length-1-i];
    arr[i] = holdB;
    arr[arr.length-1-i] = holdA;
  }
  return arr;

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(arr) {

  let rest = null;
  
  for (let i = arr.length-1; i >= 0; i--) {
    rest = { value : arr[i], rest : rest};
  }
  return rest;
  
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, arr = []) {
  
  arr.push(list.value);
  if (list.rest === null) return arr;
  return listToArray(list.rest, arr);


}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(val, list) {
  return {
    value: val,
    rest: list
  }

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
  if (num == 0) {
    return list.value;
  }
  if (list.rest == null) return undefined;
  return nth(list.rest,num-1);

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a,b) {

  return JSON.stringify(a) === JSON.stringify(b) ? true:false;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
