// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arr) {

  return arr.reduce((prev,current) => prev.concat(current));
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(val, test, update, body) {
  if (test(val)) {
    body(val);
    loop(update(val), test, update, body);
  }

}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(arr, test) {
  return !arr.some(item => !test(item));

}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(text) {
  
  let ltr = [];
  let rtl = [];

  for (let i = 0; i < text.length; i++) {
    let scriptName = characterScript(text.charCodeAt(i));

    if (scriptName !== null) {
      if (scriptName.direction === 'ltr') {
        ltr.push(scriptName);
      } else {
        rtl.push(scriptName);
      }
    }
  }

  if (ltr.length > rtl.length) {
    return "ltr";
  } else {
    return "rtl";
  }

}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
